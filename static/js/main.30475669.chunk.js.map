{"version":3,"sources":["constants/paths.js","services/yelp.js","components/search-bar/SearchBar.js","components/business-grid/BusinessCell.js","components/business-grid/BusinessGrid.js","components/home/Home.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["BASE_EXECUTION_PATH","BUSINESS_SEARCH_PATH","querystring","require","getYelpBusinesses","location","a","requestOptions","method","fetch","stringify","then","r","json","catch","err","console","log","response","JSON","parse","body","Search","Input","SearchBar","props","useState","defaultText","searchText","setSearchText","className","placeholder","onChange","e","target","value","style","width","onKeyPress","event","key","onSubmit","allowClear","enterButton","size","Meta","Card","BusinessCell","xs","sm","md","lg","xl","justify","hoverable","margin","cover","objectFit","height","alt","business","name","src","image_url","title","description","price","rating","allowHalf","disabled","defaultValue","BusinessGrid","align","businesses","map","DEFAULT_SEARCH","Home","setBusinesses","setError","loading","setLoading","getBusinesses","useEffect","tip","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30475669.chunk.js","sourcesContent":["// Because yelp does not support CORS, a lambda is handling requests. This is the execute url\nexport const BASE_EXECUTION_PATH = 'https://5igtrm1xeh.execute-api.us-east-1.amazonaws.com/dev';\nexport const BUSINESS_SEARCH_PATH = '/businesses/search?';","import { BASE_EXECUTION_PATH, BUSINESS_SEARCH_PATH } from '../constants/paths'\nconst querystring = require('querystring');\n\nexport async function getYelpBusinesses(location) {\n\tconst requestOptions = {\n\t\tmethod: 'GET',\n\t};\n\tconst response = await fetch(BASE_EXECUTION_PATH + BUSINESS_SEARCH_PATH + querystring.stringify({ location: location }), requestOptions)\n\t.then(r => r.json())\n\t.catch(err => {\n\t\tconsole.log(err)\n\t\tthrow err;\n\t});\n\treturn JSON.parse(response.body);\n}","import React, { useState } from 'react';\n\nimport { Input } from 'antd';\nconst { Search } = Input;\n\nexport default function SearchBar(props)  {\n\tconst [searchText, setSearchText] = useState(props.defaultText);\n\n\tconst onSubmit = () => {\n\t\t\tprops.onSubmit(searchText);\n\t}\n\n\tconst onChange = (e) => {\n\t\tsetSearchText(e.target.value);\n\t}\n\n  return (\n\t\t<>\n\t\t\t<Search \n\t\t\t\tclassName=\"search-bar\"\n\t\t\t\tplaceholder=\"Search for businesses\" \n\t\t\t\tonChange={onChange} \n\t\t\t\tstyle={{ width: 400 }} \n\t\t\t\tvalue={searchText}\n\t\t\t\tonKeyPress={event => {\n\t\t\t\t\tif (event.key === 'Enter') {\n\t\t\t\t\t\tonSubmit();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tallowClear\n\t\t\t\tenterButton\n\t\t\t\tsize=\"large\"\n\t\t\t/>\n\t\t</>\n\t);\n};\n","import React from 'react';\nimport { Card, Col, Rate, Image } from 'antd';\nconst { Meta } = Card;\n\nexport default function BusinessCell(props)  {\n\n  return (\n\t\t\t<Col xs={24} sm={20} md={10} lg={6} xl={5} justify={\"center\"}>\n\t\t\t\t<Card\n\t\t\t\t\thoverable\n\t\t\t\t\tstyle={{ margin: 20 }}\n\t\t\t\t\tcover={\t<Image \n\t\t\t\t\t\tstyle= {{ objectFit: \"cover\", height: \"240px\" }}\n\t\t\t\t\t\talt={props.business.name} \n\t\t\t\t\t\tsrc={props.business.image_url} />}\n\t\t\t\t>\n\t\t\t\t\t<Meta \n\t\t\t\t\t\ttitle={props.business.name} \n\t\t\t\t\t\tdescription={props.business.price ? `Price - ${props.business.price}` : \"\"}\n\t\t\t\t\t/>\t\t\t\n\t\t\t\t\t<p>{props.business.rating} <Rate allowHalf disabled defaultValue={props.business.rating}/></p>\n\t\t\t\t</Card>\n\t\t\t</Col>\n\t);\n};","import React from 'react';\nimport BusinessCell from './BusinessCell';\nimport { Row } from 'antd';\n\nexport default function BusinessGrid(props)  {\n  return (\n\t\t<>\n\t\t<Row justify=\"space-around\" align=\"middle\">\n\t\t\t\t{\n\t\t\t\t\tprops.businesses.map(business => \n\t\t\t\t\t\t<BusinessCell\n\t\t\t\t\t\t\tbusiness={business}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</Row>\n\t\t</>\n\t);\n};","import React, { useState, useEffect } from 'react';\n\nimport { Spin } from 'antd';\n\nimport { getYelpBusinesses } from '../../services/yelp';\n\nimport SearchBar from '../search-bar/SearchBar';\nimport BusinessTable from '../business-grid/BusinessGrid';\n\nconst DEFAULT_SEARCH = \"Minneapolis, MN\";\n\nexport default function Home()  {\n\tconst [businesses, setBusinesses] = useState(null);\n\tconst [error, setError] = useState(false);\n\tconst [loading, setLoading] = useState(true);\n\n\tconst searchTextChanged = (searchText) => {\n\t\tgetBusinesses(searchText);\n\t}\n\n\tconst getBusinesses = async (searchText) => {\n\t\tvar response;\n\t\tsetLoading(true);\n\t\ttry {\n\t\t\tresponse = await getYelpBusinesses(searchText);\n\t\t} catch (e) {\n\t\t\tsetError(true);\n\t\t\tsetLoading(false);\n\t\t\treturn;\n\t\t}\n\t\tsetLoading(false);\n\t\tsetBusinesses(response.businesses);\n\t};\n\n\tuseEffect(() => {\n\t\tgetBusinesses(DEFAULT_SEARCH);\n\t}, []);\n\n  return (\n\t\t<>\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1>Search Businesses or Cities</h1>\n\t\t\t\t<SearchBar\n\t\t\t\t\tdefaultText={DEFAULT_SEARCH}\n\t\t\t\t\tonSubmit={searchTextChanged}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"spacer\"/>\n\t\t\t<br/>\n\t\t\t{ loading &&   <Spin tip=\"Loading...\"/> }\n\t\t\t{ !loading &&\n\t\t\t\t( businesses ? \n\t\t\t\t\t<BusinessTable\n\t\t\t\t\t\tbusinesses={businesses}/>: <h1>Sorry, no businesses found</h1>\n\t\t\t\t)\n\t\t\t}\n\t\t</>\n\t);\n};\n\n","import './App.css';\nimport Home from '../home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}